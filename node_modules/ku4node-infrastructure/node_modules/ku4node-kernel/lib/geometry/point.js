var $ = require("../base/asserters"),
    $class = require("../base/class"),
    $coord = require("./coord"),
    $vector = require("./vector");

function point(x, y) {
    point.base.call(this, x, y);
}

point.prototype = {
    isAbove: function(other) { return this.y() < other.y(); },
    isBelow: function(other) { return this.y() > other.y(); },
    isLeftOf: function(other) { return this.x() < other.x(); },
    isRightOf: function(other) { return this.x() > other.x(); },
    distanceFrom: function(other) { return $vector(this.x() - other.x(), this.y() - other.y()); },
    distanceTo: function(other) { return this.distanceFrom(other).invert(); }
}
$class.extend(point, $coord.Class);

function canParse(candidate){
    try { return !isNaN(candidate.x()) && !isNaN(candidate.y()); }
    catch(e) { return false; }
}
function parse(obj) { return new point(obj.x(), obj.y()); }

module.exports = function(x, y) { return new point(x, y); }
module.exports.Class = point;
module.exports.zero = function(){ return new point(0,0); }
module.exports.canParse = canParse;
module.exports.parse = parse;
module.exports.parse = function(candidate){ return canParse(candidate) ? parse(candidate) : null; }
