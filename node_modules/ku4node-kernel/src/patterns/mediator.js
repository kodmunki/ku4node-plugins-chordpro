var $ = require('../base/asserters'),
    $class = require('../base/class'),
    $hash = require('../collections/hash'),
    $list = require('../collections/list'),
    $observer = require('../patterns/observer');

function mediator() {
    mediator.base.call(this);
    this._observers = $hash();
}
mediator.prototype = {
    subscribe: function(name, method, scope, id) {
        var observers = this._observers;
        if(observers.containsKey(name)) observers.find(name).add(method, scope, id);
        else observers.add(name, $observer().add(method, scope, id));

        return this;
    },
    unsubscribe: function(name, id) {
        var observers = this._observers;
        if(observers.containsKey(name)) observers.find(name).remove(id);
        return this;
    },
    notify: function() {
        var args = $list.parseArguments(arguments),
            firstArg = args.find(0),
            isFirstArgData = !this._observers.containsKey(firstArg),
            isFilteredCall = !isFirstArgData || (args.count() > 1),
            data = isFirstArgData ? firstArg : null,
            nameList = args.remove(firstArg);

        return (isFilteredCall)
            ? this._notify(data, nameList)
            : this._notifyAll(data);

        return this;
    },
    clear: function(){
        this._observers
            .each(function(o){ o.value.clear(); })
            .clear();
        return this;
    },
    isEmpty: function(){
        return this._observers.isEmpty();
    },
    _notifyAll: function(data){
        $list(this._observers.values()).each(function(o){ o.notify(data); });
        return this;
    },
    _notify: function(data, list) {
        var o = this._observers;
        list.each(function(name){
            try { o.find(name).notify(data); }
            catch(e){ console.log(e); }
        });
        return this;
    }
}
$class.extend(mediator, $class);

module.exports = function() { return new mediator(); }
module.exports.Class = mediator;