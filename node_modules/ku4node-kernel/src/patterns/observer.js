var $uid = require('../base/uid'),
    $class = require('../base/class'),
    $hash = require('../collections/hash'),
    $list = require('../collections/list'),
    $iterator = require('../patterns/iterator');

function observer() {
    observer.base.call(this);
    this._methods = $hash();
}
observer.prototype = {
    add: function(method, scope, id) {
        var mid = id || $uid("observerMethod"), scp = scope || this;
        this._methods.add(mid, { m: method, s: scp });
        return this;
    },
    remove: function(id) {
        this._methods.remove(id);
        return this;
    },
    clear: function(){
        this._methods.clear();
        return this;
    },
    notify: function() {
        var it = new $iterator($list(this._methods.values()).toArray()), a = arguments;
        it.each(function(c) { c.m.apply(c.s, a); });
        return this;
    },
    isEmpty: function(){ return this._methods.isEmpty(); }
}
$class.extend(observer, $class);

module.exports = function() { return new observer(); }
module.exports.Class = observer